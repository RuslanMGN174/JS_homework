{"version":3,"sources":["Modal/Modal.js","Context.js","Comments/NewComment.js","Comments/CommentList.js","App.js","serviceWorker.js","index.js"],"names":["styles","input","width","textarea","height","resize","div","marginBottom","divCenter","textAlign","label","display","button","Modal","state","isOpen","Fragment","href","onClick","setState","this","className","onSubmit","props","style","htmlFor","autoFocus","id","required","type","React","Component","Context","createContext","NewComment","comment","removeComment","useContext","author","date","bind","text","replace","ul","listStyle","margin","padding","CommentsList","comments","map","key","App","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","setComments","Provider","filter","event","preventDefault","concat","Date","now","target","name","toLocaleString","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.edf70d3e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nconst styles = {\r\n\r\n  input: {\r\n    width: \"394px\"\r\n  },\r\n\r\n  textarea: {\r\n    width: \"394px\",\r\n    height: \"100px\",\r\n    resize: \"none\",\r\n  },\r\n\r\n  div: {\r\n    marginBottom: \"1rem\",\r\n    // textAlign: \"center\"\r\n  },\r\n\r\n  divCenter: {\r\n    marginBottom: \"1rem\",\r\n    textAlign: \"center\"\r\n  },\r\n\r\n  label: {\r\n    display: \"inline-block\",\r\n    marginBottom: \".5rem\"\r\n  },\r\n\r\n  button: {\r\n    width: \"400px\",\r\n    marginBottom: \"1rem\"\r\n  }\r\n}\r\nexport default class Modal extends React.Component {\r\n  state = {\r\n    isOpen: false\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <a href=\"#about\" onClick={() => this.setState({ isOpen: true })}>New comment</a>\r\n        {this.state.isOpen && (<div className=\"modal\">\r\n          <div className=\"modal-body\">\r\n            <form onSubmit={this.props.onSubmit}>\r\n              <div style={styles.div}>\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input autoFocus\r\n                  style={styles.input}\r\n                  id=\"name\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div style={styles.div} >\r\n                <label htmlFor=\"comment\">Comment</label>\r\n                <textarea\r\n                  style={styles.textarea}\r\n                  id=\"comment\"\r\n                  required \r\n                  />\r\n              </div>\r\n              <div style={styles.divCenter} >\r\n                <button type=\"submit\" style={styles.button}>Submit</button>\r\n                <button style={styles.button} onClick={() => this.setState({ isOpen: false })}>Close</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { useContext } from \"react\";\r\nimport \"./Style.css\";\r\nimport Context from \"../Context\";\r\n\r\nconst NewComment = ({ comment }) => {\r\n\r\n  const { removeComment } = useContext(Context);\r\n  const clearText = text => {\r\n    return (\r\n      text.replace(/<!--[\\s\\S]*?--!?>/g, \"\").replace(/<\\/?[a-z][^>]*(>|$)/gi, \"\")\r\n    )\r\n  }\r\n\r\nreturn (\r\n  <li className=\"media-left\">\r\n    <div className=\"media-body\">\r\n      <div className=\"media-heading\">\r\n        <div className=\"author\">{comment.author}</div>\r\n        <div className=\"metadata\">\r\n          <span className=\"date\">{comment.date}</span>\r\n          <span className=\"devide\"> | </span>\r\n          <span className=\"delete\" onClick={removeComment.bind(null, comment.id)}> Удалить </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"media-text text-justify\">{clearText(comment.text)}\r\n      </div>\r\n    </div>\r\n  </li>\r\n)\r\n};\r\n\r\nexport default NewComment;\r\n","import React from \"react\";\r\nimport NewComment from \"./NewComment\";\r\n\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 0\r\n  }\r\n};\r\n\r\nconst CommentsList = (props) => {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.comments.map((comment, author, date) => {\r\n        return <NewComment\r\n          author={author}\r\n          comment={comment}\r\n          date={date}\r\n          key={comment.id}\r\n        />\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default CommentsList;","import React, { useState } from 'react';\r\nimport Modal from './Modal/Modal';\r\nimport CommentsList from './Comments/CommentList';\r\nimport Context from './Context';\r\n\r\nfunction App() {\r\n  const [comments, setComments] = useLocalStorage(\"Comments\", []);\r\n\r\n  const removeComment = (id) => {\r\n    setComments(comments.filter(comment => comment.id !== id));\r\n  };\r\n\r\n  const addComment = (event) => {\r\n    event.preventDefault(event);\r\n    setComments(comments.concat([\r\n      {\r\n        id: Date.now(),\r\n        author: event.target.name.value,\r\n        text: event.target.comment.value,\r\n        date: new Date().toLocaleString()\r\n      }\r\n    ]))\r\n  }\r\n\r\n  return (\r\n    <Context.Provider value={{ removeComment }}>\r\n      <div>\r\n        <div className=\"sidenav\">\r\n          <Modal\r\n            onSubmit={addComment}\r\n          />\r\n        </div>\r\n        <div className=\"main\">\r\n          {comments.length\r\n            ? (<CommentsList comments={comments} />)\r\n            : (<p>No comments yet!</p>)}\r\n        </div>\r\n      </div>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  // Стейт для хранения значений\r\n  // Передаем функцию начального состояния в useState, чтобы логика выполнялась только один раз\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Берем значения из local storage по ключу\r\n      const item = window.localStorage.getItem(key);\r\n      // Парсим получаемое значение или возвращаем initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // Если ишибка, то возвращаем initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Вернуть упакованную версию setter-функции useState, которая ...\r\n   // ... сохраняет новое значение для localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Позволить value быть функцией, так как у нас тот же API, что и для useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Сохраняем стэйт\r\n      setStoredValue(valueToStore);\r\n      // Сохраняем значения в local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // Более продвинутая реализация будет обрабатывать ошибки\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}